#!/bin/bash

my_dir="$(dirname "$(readlink -e "${BASH_SOURCE[0]}")")"

testno=0
failures=0

do1() {
    ((testno++))
    cat > cor.txt
    python "$my_dir"/showfloat.py "$@" &> got.txt
    if ! diff -u cor.txt got.txt > diff.txt; then
        if ((failures > 0)); then
            echo
        fi
        ((failures++))
        echo "=== Failed test $testno: showfloat $@" | sed -f color.sed
        sed -f color.sed diff.txt
    fi
    rm cor.txt got.txt diff.txt
}

tempdir="$(mktemp -d)"
pushd "$tempdir" > /dev/null

touch color.sed
# Only use color escapes if stdout is a tty.
if [ -t 1 ]; then
    # Note: which colors look good will depend on exactly how your terminal
    # displays them and what background color you use. These choices are what
    # happen to look good on my terminals. Since this is just the test script,
    # I don't provide a good way to configure it, aside from just hacking up
    # the tput calls manually.
    cat > color.sed <<END
# Failure header in bold red
/^=== /{
    s/^/$(tput setaf 1)$(tput bold)/
    s/$/$(tput sgr0)/
}
# Diff/hunk headers in green (disabled)
#/^\(---\|+++\|@@\) /{
#    s/^/$(tput setaf 2)/
#    s/$/$(tput sgr0)/
#}
# Don't treat diff header as deletion/insertion
/^\(---\|+++\)/!{
    # Deletions in yellow
    /^-/{
        s/^/$(tput setaf 3)/
        s/$/$(tput sgr0)/
    }
    # Insertions in cyan
    /^+/{
        s/^/$(tput setaf 6)/
        s/$/$(tput sgr0)/
    }
}
END
fi

finish() {
    rm color.sed
    popd > /dev/null
    rmdir "$tempdir"

    if ((failures > 0)); then
        echo
        echo "Failed $failures of $testno tests"
    else
        echo "Passed all $testno tests"
    fi
}



###############################################################################

# These tests were haphazardly thrown together by just taking some examples I'd
# tried and testing them against whatever output we already gave. Mostly they
# just verify that the output doesn't change unexpectedly.

do1 -0x1.55554p-126 <<END
### INPUT HEX: -0x1.55554p-126
Dec (approx): -1.56732431e-38
Hex (%a):     -0x1.55554p-126
int10 * ULP:  -11184800 * 2**-149
fpclassify:   FP_NORMAL
Bits (hex):   0x80aaaaa0
Bits (bin):   1 00000001 01010101010101010100000
END

do1 --exact -0x1.55554p-126 <<END
### INPUT HEX: -0x1.55554p-126
Dec (exact):  -1.5673243063780213974867730643181053945143473767500453603948457341650535301624813655507750809192657470703125e-38
Hex (%a):     -0x1.55554p-126
int10 * ULP:  -11184800 * 2**-149
fpclassify:   FP_NORMAL
Bits (hex):   0x80aaaaa0
Bits (bin):   1 00000001 01010101010101010100000
END



# Remaining tests were written intentionally.



###############################################################################
# Basic floating-point categories / edge-cases, single precision

do1 inf <<END
### INPUT DECIMAL: inf
Dec (approx): inf
Hex (%a):     inf
fpclassify:   FP_INFINITE
Bits (hex):   0x7f800000
Bits (bin):   0 11111111 00000000000000000000000
END

do1 -inf <<END
### INPUT DECIMAL: -inf
Dec (approx): -inf
Hex (%a):     -inf
fpclassify:   FP_INFINITE
Bits (hex):   0xff800000
Bits (bin):   1 11111111 00000000000000000000000
END

do1 nan <<END
### INPUT DECIMAL: nan
Dec (approx): nan
Hex (%a):     nan
fpclassify:   FP_NAN
Example bits
       (hex): 0x7fc00000
       (bin): 0 11111111 10000000000000000000000
END

do1 -nan <<END
### INPUT DECIMAL: -nan
Dec (approx): -nan
Hex (%a):     -nan
fpclassify:   FP_NAN
Example bits
       (hex): 0xffc00000
       (bin): 1 11111111 10000000000000000000000
END

do1 0 <<END
### INPUT DECIMAL: 0
Dec (approx): 0
Hex (%a):     0x0p+0
int10 * ULP:  0 * 2**-149
fpclassify:   FP_ZERO
Bits (hex):   0x00000000
Bits (bin):   0 00000000 00000000000000000000000
END

do1 -0 <<END
### INPUT DECIMAL: -0
Dec (approx): -0
Hex (%a):     -0x0p+0
int10 * ULP:  -0 * 2**-149
fpclassify:   FP_ZERO
Bits (hex):   0x80000000
Bits (bin):   1 00000000 00000000000000000000000
END

do1 0x1p-149 <<END
### INPUT HEX: 0x1p-149
Dec (approx): 1.40129846e-45
Hex (%a):     0x0.000002p-126
int10 * ULP:  1 * 2**-149
fpclassify:   FP_SUBNORMAL
Bits (hex):   0x00000001
Bits (bin):   0 00000000 00000000000000000000001
END

do1 -5e-42 <<END
### INPUT DECIMAL: -5e-42
Dec (approx): -4.99983292e-42
Hex (%a):     -0x0.001bep-126
int10 * ULP:  -3568 * 2**-149
fpclassify:   FP_SUBNORMAL
Bits (hex):   0x80000df0
Bits (bin):   1 00000000 00000000000110111110000
END

do1 0x0.fffffep-126 <<END
### INPUT HEX: 0x0.fffffep-126
Dec (approx): 1.17549421e-38
Hex (%a):     0x0.fffffep-126
int10 * ULP:  8388607 * 2**-149
fpclassify:   FP_SUBNORMAL
Bits (hex):   0x007fffff
Bits (bin):   0 00000000 11111111111111111111111
END

do1 -0x1p-126 <<END
### INPUT HEX: -0x1p-126
Dec (approx): -1.17549435e-38
Hex (%a):     -0x1p-126
int10 * ULP:  -8388608 * 2**-149
fpclassify:   FP_NORMAL
Bits (hex):   0x80800000
Bits (bin):   1 00000001 00000000000000000000000
END

do1 4194303.75 <<END
### INPUT DECIMAL: 4194303.75
Dec (approx): 4194303.75
Hex (%a):     0x1.fffffep+21
int10 * ULP:  16777215 * 2**-2
fpclassify:   FP_NORMAL
Bits (hex):   0x4a7fffff
Bits (bin):   0 10010100 11111111111111111111111
END

do1 -4194304 <<END
### INPUT DECIMAL: -4194304
Dec (approx): -4194304
Hex (%a):     -0x1p+22
int10 * ULP:  -8388608 * 2**-1
fpclassify:   FP_NORMAL
Bits (hex):   0xca800000
Bits (bin):   1 10010101 00000000000000000000000
END

do1 1.2345e+10 <<END
### INPUT DECIMAL: 1.2345e+10
Dec (approx): 1.23449999e+10
Hex (%a):     0x1.6fe8ep+33
int10 * ULP:  12055664 * 2**10
fpclassify:   FP_NORMAL
Bits (hex):   0x5037f470
Bits (bin):   0 10100000 01101111111010001110000
END

do1 -0x1.fffffep+127 <<END
### INPUT HEX: -0x1.fffffep+127
Dec (approx): -3.40282347e+38
Hex (%a):     -0x1.fffffep+127
int10 * ULP:  -16777215 * 2**104
fpclassify:   FP_NORMAL
Bits (hex):   0xff7fffff
Bits (bin):   1 11111110 11111111111111111111111
END



###############################################################################
# Input from bits (mostly same cases from above)

do1 --bits 0 <<END
### INPUT BITS: 0
Dec (approx): 0
Hex (%a):     0x0p+0
int10 * ULP:  0 * 2**-149
fpclassify:   FP_ZERO
Bits (hex):   0x00000000
Bits (bin):   0 00000000 00000000000000000000000
END

do1 --bits 0x80000000 <<END
### INPUT BITS: 0x80000000
Dec (approx): -0
Hex (%a):     -0x0p+0
int10 * ULP:  -0 * 2**-149
fpclassify:   FP_ZERO
Bits (hex):   0x80000000
Bits (bin):   1 00000000 00000000000000000000000
END

do1 --bits 1 <<END
### INPUT BITS: 1
Dec (approx): 1.40129846e-45
Hex (%a):     0x0.000002p-126
int10 * ULP:  1 * 2**-149
fpclassify:   FP_SUBNORMAL
Bits (hex):   0x00000001
Bits (bin):   0 00000000 00000000000000000000001
END

do1 --bits 0x7fffff <<END
### INPUT BITS: 0x7fffff
Dec (approx): 1.17549421e-38
Hex (%a):     0x0.fffffep-126
int10 * ULP:  8388607 * 2**-149
fpclassify:   FP_SUBNORMAL
Bits (hex):   0x007fffff
Bits (bin):   0 00000000 11111111111111111111111
END

do1 --bits 0x80800000 <<END
### INPUT BITS: 0x80800000
Dec (approx): -1.17549435e-38
Hex (%a):     -0x1p-126
int10 * ULP:  -8388608 * 2**-149
fpclassify:   FP_NORMAL
Bits (hex):   0x80800000
Bits (bin):   1 00000001 00000000000000000000000
END

# Just some arbitrary hex value, not a duplicate with the previous group of
# cases
do1 --bits 0x12345678 <<END
### INPUT BITS: 0x12345678
Dec (approx): 5.69045661e-28
Hex (%a):     0x1.68acfp-91
int10 * ULP:  11818616 * 2**-114
fpclassify:   FP_NORMAL
Bits (hex):   0x12345678
Bits (bin):   0 00100100 01101000101011001111000
END

do1 --bits 0x4a7fffff <<END
### INPUT BITS: 0x4a7fffff
Dec (approx): 4194303.75
Hex (%a):     0x1.fffffep+21
int10 * ULP:  16777215 * 2**-2
fpclassify:   FP_NORMAL
Bits (hex):   0x4a7fffff
Bits (bin):   0 10010100 11111111111111111111111
END

do1 --bits 0xca800000 <<END
### INPUT BITS: 0xca800000
Dec (approx): -4194304
Hex (%a):     -0x1p+22
int10 * ULP:  -8388608 * 2**-1
fpclassify:   FP_NORMAL
Bits (hex):   0xca800000
Bits (bin):   1 10010101 00000000000000000000000
END

do1 --bits 0xff7fffff <<END
### INPUT BITS: 0xff7fffff
Dec (approx): -3.40282347e+38
Hex (%a):     -0x1.fffffep+127
int10 * ULP:  -16777215 * 2**104
fpclassify:   FP_NORMAL
Bits (hex):   0xff7fffff
Bits (bin):   1 11111110 11111111111111111111111
END

do1 --bits 0x7f800000 <<END
### INPUT BITS: 0x7f800000
Dec (approx): inf
Hex (%a):     inf
fpclassify:   FP_INFINITE
Bits (hex):   0x7f800000
Bits (bin):   0 11111111 00000000000000000000000
END

do1 --bits 0xff800000 <<END
### INPUT BITS: 0xff800000
Dec (approx): -inf
Hex (%a):     -inf
fpclassify:   FP_INFINITE
Bits (hex):   0xff800000
Bits (bin):   1 11111111 00000000000000000000000
END

# The canonical NaN (per the convention this script uses, anyway).
# Since it was specified by bits, it should NOT show as "example bits".
do1 --bits 0x7fc00000 <<END
### INPUT BITS: 0x7fc00000
Dec (approx): nan
Hex (%a):     nan
fpclassify:   FP_NAN
Bits (hex):   0x7fc00000
Bits (bin):   0 11111111 10000000000000000000000
END

# Non-canonical NaNs
do1 --bits 0x7f801230 <<END
### INPUT BITS: 0x7f801230
Dec (approx): nan
Hex (%a):     nan
fpclassify:   FP_NAN
Bits (hex):   0x7f801230
Bits (bin):   0 11111111 00000000001001000110000
END

do1 --bits 0xff800001 <<END
### INPUT BITS: 0xff800001
Dec (approx): -nan
Hex (%a):     -nan
fpclassify:   FP_NAN
Bits (hex):   0xff800001
Bits (bin):   1 11111111 00000000000000000000001
END



###############################################################################
# Weird Intel80-specific cases where leading mantissa bit has wrong value

do1 --intel80 --bits 0x7fff4000000000000000 <<END
### INPUT BITS: 0x7fff4000000000000000
Dec (approx): nan
Hex (%a):     nan
fpclassify:   Pseudo-NaN
Bits (hex):   0x7fff4000000000000000
Bits (bin):   0 111111111111111 0100000000000000000000000000000000000000000000000000000000000000
END

do1 --intel80 --bits 0x7fff0000000000000000 <<END
### INPUT BITS: 0x7fff0000000000000000
Dec (approx): inf
Hex (%a):     inf
fpclassify:   Pseudo-infinity
Bits (hex):   0x7fff0000000000000000
Bits (bin):   0 111111111111111 0000000000000000000000000000000000000000000000000000000000000000
END

# Clear the leading bit from 1.5 and we get 0.5
do1 --intel80 --bits 0x3fff4000000000000000 <<END
### INPUT BITS: 0x3fff4000000000000000
Dec (approx): 0.5
Hex (%a):     0x0.8p+0
int10 * ULP:  4611686018427387904 * 2**-63
fpclassify:   Unnormal
Bits (hex):   0x3fff4000000000000000
Bits (bin):   0 011111111111111 0100000000000000000000000000000000000000000000000000000000000000
END

# Clear the leading bit from 1.0 and we get 0.0, which is not any kind of
# subnormal even though it has value 0. Just an unnormal with a zero mantissa.
do1 --intel80 --bits 0x3fff0000000000000000 <<END
### INPUT BITS: 0x3fff0000000000000000
Dec (approx): 0
Hex (%a):     0x0p+0
int10 * ULP:  0 * 2**-63
fpclassify:   Unnormal
Bits (hex):   0x3fff0000000000000000
Bits (bin):   0 011111111111111 0000000000000000000000000000000000000000000000000000000000000000
END

# Pseudo-denormal where we set the leading bit on something already nonzero
do1 --intel80 --bits 0x0000c000000000000000 <<END
### INPUT BITS: 0x0000c000000000000000
Dec (approx): 5.04315471466814025939e-4932
Hex (%a):     0x1.8p-16382
int10 * ULP:  13835058055282163712 * 2**-16445
fpclassify:   Pseudo-denormal
Bits (hex):   0x0000c000000000000000
Bits (bin):   0 000000000000000 1100000000000000000000000000000000000000000000000000000000000000
END

# Pseudo-denormal where we set the leading bit on 0.0.
do1 --intel80 --bits 0x00008000000000000000 <<END
### INPUT BITS: 0x00008000000000000000
Dec (approx): 3.36210314311209350626e-4932
Hex (%a):     0x1p-16382
int10 * ULP:  9223372036854775808 * 2**-16445
fpclassify:   Pseudo-denormal
Bits (hex):   0x00008000000000000000
Bits (bin):   0 000000000000000 1000000000000000000000000000000000000000000000000000000000000000
END



###############################################################################
# Error cases (and some barely-not-error boundary cases)

do1 junk <<END
Error: failed to parse value 'junk'
END

do1 --exact 1.234junk <<END
Error: failed to parse value '1.234junk'
END

do1 --bits blargh <<END
Error: illegal bits 'blargh', must be nonnegative integer
END

do1 --bits 3.5 <<END
Error: illegal bits '3.5', must be nonnegative integer
END

do1 --bits -0xaaaaaaaa <<END
Error: illegal bits '-0xaaaaaaaa', must be nonnegative integer
END

do1 --bits -0xaaaaaaaa <<END
Error: illegal bits '-0xaaaaaaaa', must be nonnegative integer
END

# Bits just barely too large for binary32
do1 --bits 0x100000000 <<END
Error: bits '0x100000000' too large, 33 bits long but binary32 format only has 32 bits
END

# Bits just barely not too large
do1 --bits 0xffffffff <<END
### INPUT BITS: 0xffffffff
Dec (approx): -nan
Hex (%a):     -nan
fpclassify:   FP_NAN
Bits (hex):   0xffffffff
Bits (bin):   1 11111111 11111111111111111111111
END

# Larger values are fine in binary64...
do1 --double --bits 0x4000000000000000 <<END
### INPUT BITS: 0x4000000000000000
Dec (approx): 2
Hex (%a):     0x1p+1
int10 * ULP:  4503599627370496 * 2**-51
fpclassify:   FP_NORMAL
Bits (hex):   0x4000000000000000
Bits (bin):   0 10000000000 0000000000000000000000000000000000000000000000000000
END

# ...to a point
do1 --double --bits 0x10000000000000000 <<END
Error: bits '0x10000000000000000' too large, 65 bits long but binary64 format only has 64 bits
END


###############################################################################

# TODO other categories:
#   - Types: double precision, half, Intel80
#       - Probably start with some basic sanity checks in these
#       - Don't need +/- inf, +/- nan, +/- 0 in every type. At most one sign of
#         each in other types.
#       - Note we have tricky decimal cases below which include max norm, min
#         subnorm, and a small normal.
#       - Probably a good set of inputs for a new type:
#           - inf (by value and by bits)
#           - nan (by value and by bits)
#           - A moderate normal
#           - A normal whose hex digits run all the way to the end of the
#             mantissa? (e.g. .aaaa... with a 0xd or sthg at the end)
#               - TODO also for float
#               - Something negative, could be one of the normals
#               - One of the above by bits as well (maybe the negative one?)
#           - TYP_MIN and nextDown(TYP_MIN)?
#   - Semi-bad inputs (especially unrepresentable hex, but also over/underflow
#     and decimal rounding edge cases)
#       - Renormalizing hex, and generally misnormalized cases



###############################################################################
# Some cases with pathologically long representations. In each format:
#   - Max value
#   - nextDown(2 * min normal value)
#       - I believe this is the worst case for length of decimal
#         representation. It is the largest value with an ulp of min-subnormal.
#   - Min subnormal value
# The expected strings come from WolframAlpha. Note that you can enter things
# like "2**-16445 to 16000 digits" to get around the usual limit on how many
# times it'll let you click "more digits" (though there does still seem to be a
# max before it gives up).
#
# These are here at the very end because they're so long you can't really find
# anything after them in the test file.

# TODO half precision

# Float

do1 --exact 0x1.fffffep+127 <<END
### INPUT HEX: 0x1.fffffep+127
Dec (exact):  340282346638528859811704183484516925440
Hex (%a):     0x1.fffffep+127
int10 * ULP:  16777215 * 2**104
fpclassify:   FP_NORMAL
Bits (hex):   0x7f7fffff
Bits (bin):   0 11111110 11111111111111111111111
END

do1 --exact 0x1.fffffep-126 <<END
### INPUT HEX: 0x1.fffffep-126
Dec (exact):  2.350988561514728583455765982071533026645717985517980855365926236850006129930346077117064851336181163787841796875e-38
Hex (%a):     0x1.fffffep-126
int10 * ULP:  16777215 * 2**-149
fpclassify:   FP_NORMAL
Bits (hex):   0x00ffffff
Bits (bin):   0 00000001 11111111111111111111111
END

do1 --exact --bits 1 <<END
### INPUT BITS: 1
Dec (exact):  1.40129846432481707092372958328991613128026194187651577175706828388979108268586060148663818836212158203125e-45
Hex (%a):     0x0.000002p-126
int10 * ULP:  1 * 2**-149
fpclassify:   FP_SUBNORMAL
Bits (hex):   0x00000001
Bits (bin):   0 00000000 00000000000000000000001
END

do1 --exact --double 0x1.fffffffffffffp+1023 <<END
### INPUT HEX: 0x1.fffffffffffffp+1023
Dec (exact):  179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368
Hex (%a):     0x1.fffffffffffffp+1023
int10 * ULP:  9007199254740991 * 2**971
fpclassify:   FP_NORMAL
Bits (hex):   0x7fefffffffffffff
Bits (bin):   0 11111111110 1111111111111111111111111111111111111111111111111111
END

do1 --exact --double 0x1.fffffffffffffp-1022 <<END
### INPUT HEX: 0x1.fffffffffffffp-1022
Dec (exact):  4.4501477170144022721148195934182639518696390927032912960468522194496444440421538910330590478162701758282983178260792422137401728773891892910553144148156412434867599762821265346585071045737627442980259622449029037796981144446145705102663115100318287949527959668236039986479250965780342141637013812613333119898765515451440315261253813266652951306000184917766328660755595837392240989947807556594098101021612198814605258742579179000071675999344145086087205681577915435923018910334964869420614052182892431445797605163650903606514140377217442262561590244668525767372446430075513332450079650686719491377688478005309963967709758965844137894433796621993967316936280457084866613206797017728916080020698679408551343728867675409720757232455434770912461317493580281734466552734375e-308
Hex (%a):     0x1.fffffffffffffp-1022
int10 * ULP:  9007199254740991 * 2**-1074
fpclassify:   FP_NORMAL
Bits (hex):   0x001fffffffffffff
Bits (bin):   0 00000000001 1111111111111111111111111111111111111111111111111111
END

do1 --exact --double --bits 1 <<END
### INPUT BITS: 1
Dec (exact):  4.940656458412465441765687928682213723650598026143247644255856825006755072702087518652998363616359923797965646954457177309266567103559397963987747960107818781263007131903114045278458171678489821036887186360569987307230500063874091535649843873124733972731696151400317153853980741262385655911710266585566867681870395603106249319452715914924553293054565444011274801297099995419319894090804165633245247571478690147267801593552386115501348035264934720193790268107107491703332226844753335720832431936092382893458368060106011506169809753078342277318329247904982524730776375927247874656084778203734469699533647017972677717585125660551199131504891101451037862738167250955837389733598993664809941164205702637090279242767544565229087538682506419718265533447265625e-324
Hex (%a):     0x0.0000000000001p-1022
int10 * ULP:  1 * 2**-1074
fpclassify:   FP_SUBNORMAL
Bits (hex):   0x0000000000000001
Bits (bin):   0 00000000000 0000000000000000000000000000000000000000000000000001
END

do1 --exact --intel80 0x1.fffffffffffffffep+16383 <<END
### INPUT HEX: 0x1.fffffffffffffffep+16383
Dec (exact):  1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240
Hex (%a):     0x1.fffffffffffffffep+16383
int10 * ULP:  18446744073709551615 * 2**16320
fpclassify:   FP_NORMAL
Bits (hex):   0x7ffeffffffffffffffff
Bits (bin):   0 111111111111110 1111111111111111111111111111111111111111111111111111111111111111
END

do1 --exact --intel80 0x1.fffffffffffffffep-16382 <<END
### INPUT HEX: 0x1.fffffffffffffffep-16382
Dec (exact):  6.
Hex (%a):     0x1.fffffffffffffffep-16382
int10 * ULP:  18446744073709551615 * 2**-16445
fpclassify:   FP_NORMAL
Bits (hex):   0x0001ffffffffffffffff
Bits (bin):   0 000000000000001 1111111111111111111111111111111111111111111111111111111111111111
END

do1 --exact --intel80 --bits 1 <<END
### INPUT BITS: 1
Dec (exact):  3.
Hex (%a):     0x0.0000000000000002p-16382
int10 * ULP:  1 * 2**-16445
fpclassify:   FP_SUBNORMAL
Bits (hex):   0x00000000000000000001
Bits (bin):   0 000000000000000 0000000000000000000000000000000000000000000000000000000000000001
END



###############################################################################

finish

